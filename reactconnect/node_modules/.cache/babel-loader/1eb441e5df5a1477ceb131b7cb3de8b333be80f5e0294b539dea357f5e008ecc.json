{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Paul\\\\Desktop\\\\new folder\\\\reactconnect\\\\reactconnect\\\\src\\\\components\\\\split_container\\\\SplitContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Split from \"react-split\";\nimport './splitcontainer.css';\nimport CodeEditor from \"../../screens/Editor/Editor\";\nimport { getFileContent } from \"../../../../Server/editor\";\nimport Files from \"./Files\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SplitContainer = ({\n  param,\n  isSidebarCollapsed\n}) => {\n  _s();\n  // storing editor active file ( the code file where use see in the editor)\n  const [activeFile, setActiveFile] = useState(\"\");\n  // storing all the files that are opened in editor ( each file tabs in the editor)\n  const [files, setFiles] = useState({});\n  const getFiles = async () => {\n    // Fetch the content of the desired file\n    try {\n      const filePath = 'lib/features/about_parko/screens/about_screen.dart';\n      const content = await getFileContent(filePath);\n      // Do something with the content, such as setting it in the state or using it in the CodeEditor component.\n      console.log(content);\n    } catch (error) {\n      // Handle any errors that may occur during the fetch process.\n      console.error('Error fetching file content:', error);\n    }\n  };\n\n  // Call the getFiles function when the component mounts (or at any other appropriate time).\n  useEffect(() => {\n    getFiles();\n  }, []);\n  const splitSizes = isSidebarCollapsed ? [0, 100] : [15, 85];\n  function deleteFileFromFiles(filename) {\n    setFiles(current => {\n      delete current[filename];\n      return current;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Split, {\n      className: \"container\",\n      sizes: splitSizes,\n      minSize: 0,\n      expandToMin: false,\n      gutterSize: 5,\n      gutterAlign: \"center\",\n      snapOffset: 30,\n      dragInterval: 1,\n      direction: \"horizontal\",\n      cursor: \"col-resize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-content\",\n        children: [/*#__PURE__*/_jsxDEV(Files, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n};\n_s(SplitContainer, \"9ODJY9blt6c9lH6LFDtK4QkXC5Y=\");\n_c = SplitContainer;\nexport default SplitContainer;\nvar _c;\n$RefreshReg$(_c, \"SplitContainer\");","map":{"version":3,"names":["React","useState","Split","CodeEditor","getFileContent","Files","jsxDEV","_jsxDEV","Fragment","_Fragment","SplitContainer","param","isSidebarCollapsed","_s","activeFile","setActiveFile","files","setFiles","getFiles","filePath","content","console","log","error","useEffect","splitSizes","deleteFileFromFiles","filename","current","children","className","sizes","minSize","expandToMin","gutterSize","gutterAlign","snapOffset","dragInterval","direction","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Paul/Desktop/new folder/reactconnect/reactconnect/src/components/split_container/SplitContainer.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Split from \"react-split\";\r\nimport './splitcontainer.css';\r\nimport CodeEditor from \"../../screens/Editor/Editor\";\r\nimport { getFileContent } from \"../../../../Server/editor\"; \r\nimport Files from \"./Files\";\r\n\r\n\r\nconst SplitContainer = ({ param, isSidebarCollapsed }) => {\r\n    // storing editor active file ( the code file where use see in the editor)\r\n    const [activeFile, setActiveFile] = useState(\"\");\r\n    // storing all the files that are opened in editor ( each file tabs in the editor)\r\n    const [files, setFiles] = useState({});\r\n\r\n    const getFiles = async () => {\r\n        // Fetch the content of the desired file\r\n        try {\r\n          const filePath = 'lib/features/about_parko/screens/about_screen.dart';\r\n          const content = await getFileContent(filePath);\r\n          // Do something with the content, such as setting it in the state or using it in the CodeEditor component.\r\n          console.log(content);\r\n        } catch (error) {\r\n          // Handle any errors that may occur during the fetch process.\r\n          console.error('Error fetching file content:', error);\r\n        }\r\n      };\r\n      \r\n      // Call the getFiles function when the component mounts (or at any other appropriate time).\r\n      useEffect(() => {\r\n        getFiles();\r\n      }, []);\r\n  \r\n    const splitSizes = isSidebarCollapsed ? [0,100] : [15,85]\r\n  \r\n    function deleteFileFromFiles(filename) {\r\n      setFiles((current) => {\r\n        delete current[filename];\r\n        return current;\r\n      });\r\n    }\r\n  \r\n    return (\r\n      <>\r\n         <Split\r\n        className=\"container\"\r\n        sizes={splitSizes}\r\n        minSize={0}\r\n        expandToMin={false}\r\n        gutterSize={5}\r\n        gutterAlign=\"center\"\r\n        snapOffset={30}\r\n        dragInterval={1}\r\n        direction=\"horizontal\"\r\n        cursor=\"col-resize\"\r\n      >\r\n        \r\n\r\n\r\n        <div className=\"editor\">\r\n          {\r\n            <CodeEditor/>\r\n          }\r\n          \r\n        </div>\r\n        <div className=\"file-content\">\r\n          <Files /> {/* Use the Files component here to display the fetched file content */}\r\n        </div>\r\n      </Split>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default SplitContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,sBAAsB;AAC7B,OAAOC,UAAU,MAAM,6BAA6B;AACpD,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG5B,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EACtD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtC,MAAMiB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,oDAAoD;MACrE,MAAMC,OAAO,GAAG,MAAMhB,cAAc,CAACe,QAAQ,CAAC;MAC9C;MACAE,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;IACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACd;MACAF,OAAO,CAACE,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACAC,SAAS,CAAC,MAAM;IACdN,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAER,MAAMO,UAAU,GAAGb,kBAAkB,GAAG,CAAC,CAAC,EAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAC,EAAE,CAAC;EAEzD,SAASc,mBAAmBA,CAACC,QAAQ,EAAE;IACrCV,QAAQ,CAAEW,OAAO,IAAK;MACpB,OAAOA,OAAO,CAACD,QAAQ,CAAC;MACxB,OAAOC,OAAO;IAChB,CAAC,CAAC;EACJ;EAEA,oBACErB,OAAA,CAAAE,SAAA;IAAAoB,QAAA,eACGtB,OAAA,CAACL,KAAK;MACP4B,SAAS,EAAC,WAAW;MACrBC,KAAK,EAAEN,UAAW;MAClBO,OAAO,EAAE,CAAE;MACXC,WAAW,EAAE,KAAM;MACnBC,UAAU,EAAE,CAAE;MACdC,WAAW,EAAC,QAAQ;MACpBC,UAAU,EAAE,EAAG;MACfC,YAAY,EAAE,CAAE;MAChBC,SAAS,EAAC,YAAY;MACtBC,MAAM,EAAC,YAAY;MAAAV,QAAA,gBAKnBtB,OAAA;QAAKuB,SAAS,EAAC,QAAQ;QAAAD,QAAA,eAEnBtB,OAAA,CAACJ,UAAU;UAAAqC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CAAC,eACNpC,OAAA;QAAKuB,SAAS,EAAC,cAAc;QAAAD,QAAA,gBAC3BtB,OAAA,CAACF,KAAK;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC,gBACN,CAAC;AAEP,CAAC;AAAC9B,EAAA,CA9DEH,cAAc;AAAAkC,EAAA,GAAdlC,cAAc;AAgElB,eAAeA,cAAc;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}