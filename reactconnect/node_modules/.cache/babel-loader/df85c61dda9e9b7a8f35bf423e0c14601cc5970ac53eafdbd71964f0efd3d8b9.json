{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Paul\\\\Desktop\\\\new folder\\\\reactconnect\\\\reactconnect\\\\src\\\\components\\\\split_container\\\\SplitContainer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Split from \"react-split\";\nimport './splitcontainer.css';\nimport CodeEditor from \"../../screens/Editor/Editor\";\nimport Files from \"./Files\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SplitContainer = ({\n  param,\n  isSidebarCollapsed\n}) => {\n  _s();\n  // storing editor active file ( the code file where use see in the editor)\n  const [activeFile, setActiveFile] = useState(\"\");\n  // storing all the files that are opened in editor ( each file tabs in the editor)\n  const [files, setFiles] = useState({});\n  async function getFileContent(filePath) {\n    const owner = 'bishalbera';\n    const repo = 'Parko';\n    const branch = 'master';\n    const accessToken = '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';\n    const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\n    const headers = {\n      'Authorization': `token ${accessToken}`\n    };\n    const response = await fetch(url, {\n      headers\n    });\n    const data = await response.json();\n    for (const item of data.tree) {\n      if (item.type === 'blob' && item.path === filePath) {\n        const fileUrl = item.url;\n        const fileResponse = await fetch(fileUrl, {\n          headers\n        });\n        const fileData = await fileResponse.json();\n        const fileContent = fileData.content;\n        const decodedContent = atob(fileContent);\n        return decodedContent;\n      }\n    }\n    return null;\n  }\n  const owner = 'bishalbera';\n  const repo = 'Parko';\n  const branch = 'master';\n  const accessToken = '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';\n  const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\n  const headers = {\n    'Authorization': `token ${accessToken}`\n  };\n  const text = document.getElementById(\"text\");\n  fetch(url, {\n    headers\n  }).then(response => response.json()).then(data => {\n    for (const item of data.tree) {\n      if (item.type === 'tree') {\n        console.log(item.path);\n      }\n    }\n    process.stdin.on('data', input => {\n      const folder = input.toString().trim();\n      for (const item of data.tree) {\n        if (item.type === 'blob' && item.path.startsWith(folder)) {\n          const fileUrl = item.url;\n          fetch(fileUrl, {\n            headers\n          }).then(fileResponse => fileResponse.json()).then(fileData => {\n            const fileContent = fileData.content;\n            const decodedContent = atob(fileContent);\n            console.log(decodedContent);\n            text.innerHTML += `${decodedContent}<br/>`;\n          });\n        }\n      }\n    });\n  });\n  getFileContent('lib/features/about_parko/screens/about_screen.dart').then(content => {\n    console.log(content);\n    text.innerHTML += `${content}<br/>`;\n  });\n  const getFiles = async () => {\n    // Fetch the content of the desired file\n    try {\n      const filePath = 'lib/features/about_parko/screens/about_screen.dart';\n      const content = await getFileContent(filePath);\n      // Do something with the content, such as setting it in the state or using it in the CodeEditor component.\n      console.log(content);\n    } catch (error) {\n      // Handle any errors that may occur during the fetch process.\n      console.error('Error fetching file content:', error);\n    }\n  };\n\n  // Call the getFiles function when the component mounts (or at any other appropriate time).\n  useEffect(() => {\n    getFiles();\n  }, []);\n  const splitSizes = isSidebarCollapsed ? [0, 100] : [15, 85];\n  function deleteFileFromFiles(filename) {\n    setFiles(current => {\n      delete current[filename];\n      return current;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Split, {\n      className: \"container\",\n      sizes: splitSizes,\n      minSize: 0,\n      expandToMin: false,\n      gutterSize: 5,\n      gutterAlign: \"center\",\n      snapOffset: 30,\n      dragInterval: 1,\n      direction: \"horizontal\",\n      cursor: \"col-resize\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"file-content\",\n        children: [/*#__PURE__*/_jsxDEV(Files, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 10\n    }, this)\n  }, void 0, false);\n};\n_s(SplitContainer, \"9ODJY9blt6c9lH6LFDtK4QkXC5Y=\");\n_c = SplitContainer;\nexport default SplitContainer;\nvar _c;\n$RefreshReg$(_c, \"SplitContainer\");","map":{"version":3,"names":["React","useState","useEffect","Split","CodeEditor","Files","jsxDEV","_jsxDEV","Fragment","_Fragment","SplitContainer","param","isSidebarCollapsed","_s","activeFile","setActiveFile","files","setFiles","getFileContent","filePath","owner","repo","branch","accessToken","url","headers","response","fetch","data","json","item","tree","type","path","fileUrl","fileResponse","fileData","fileContent","content","decodedContent","atob","text","document","getElementById","then","console","log","process","stdin","on","input","folder","toString","trim","startsWith","innerHTML","getFiles","error","splitSizes","deleteFileFromFiles","filename","current","children","className","sizes","minSize","expandToMin","gutterSize","gutterAlign","snapOffset","dragInterval","direction","cursor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Paul/Desktop/new folder/reactconnect/reactconnect/src/components/split_container/SplitContainer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Split from \"react-split\";\r\nimport './splitcontainer.css';\r\nimport CodeEditor from \"../../screens/Editor/Editor\";\r\nimport Files from \"./Files\";\r\n\r\n\r\nconst SplitContainer = ({ param, isSidebarCollapsed }) => {\r\n    // storing editor active file ( the code file where use see in the editor)\r\n    const [activeFile, setActiveFile] = useState(\"\");\r\n    // storing all the files that are opened in editor ( each file tabs in the editor)\r\n    const [files, setFiles] = useState({});\r\n\r\n    async function getFileContent(filePath) {\r\n        const owner = 'bishalbera';\r\n        const repo = 'Parko';\r\n        const branch = 'master';\r\n        const accessToken = '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';\r\n      \r\n        const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\r\n        const headers = { 'Authorization': `token ${accessToken}` };\r\n      \r\n        const response = await fetch(url, { headers });\r\n        const data = await response.json();\r\n      \r\n        for (const item of data.tree) {\r\n          if (item.type === 'blob' && item.path === filePath) {\r\n            const fileUrl = item.url;\r\n            const fileResponse = await fetch(fileUrl, { headers });\r\n            const fileData = await fileResponse.json();\r\n            const fileContent = fileData.content;\r\n            const decodedContent = atob(fileContent);\r\n            return decodedContent;\r\n          }\r\n        }\r\n      \r\n        return null;\r\n      }\r\n      \r\n      const owner = 'bishalbera';\r\n      const repo = 'Parko';\r\n      const branch = 'master';\r\n      const accessToken = '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';\r\n      \r\n      const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\r\n      const headers = { 'Authorization': `token ${accessToken}` };\r\n      \r\n      const text = document.getElementById(\"text\");\r\n      \r\n      fetch(url, { headers })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          for (const item of data.tree) {\r\n            if (item.type === 'tree') {\r\n              console.log(item.path);\r\n            }\r\n          }\r\n      \r\n          process.stdin.on('data', input => {\r\n            const folder = input.toString().trim();\r\n            for (const item of data.tree) {\r\n              if (item.type === 'blob' && item.path.startsWith(folder)) {\r\n                const fileUrl = item.url;\r\n                fetch(fileUrl, { headers })\r\n                  .then(fileResponse => fileResponse.json())\r\n                  .then(fileData => {\r\n                    const fileContent = fileData.content;\r\n                    const decodedContent = atob(fileContent);\r\n                    console.log(decodedContent);\r\n                    text.innerHTML += `${decodedContent}<br/>`;\r\n                  });\r\n              }\r\n            }\r\n          });\r\n        });\r\n      \r\n      \r\n      getFileContent('lib/features/about_parko/screens/about_screen.dart')\r\n        .then(content => {\r\n          console.log(content);\r\n          text.innerHTML += `${content}<br/>`;\r\n      });\r\n      \r\n    \r\n    const getFiles = async () => {\r\n        // Fetch the content of the desired file\r\n        try {\r\n          const filePath = 'lib/features/about_parko/screens/about_screen.dart';\r\n          const content = await getFileContent(filePath);\r\n          // Do something with the content, such as setting it in the state or using it in the CodeEditor component.\r\n          console.log(content);\r\n        } catch (error) {\r\n          // Handle any errors that may occur during the fetch process.\r\n          console.error('Error fetching file content:', error);\r\n        }\r\n      };\r\n      \r\n      // Call the getFiles function when the component mounts (or at any other appropriate time).\r\n      useEffect(() => {\r\n        getFiles();\r\n      }, []);\r\n  \r\n    const splitSizes = isSidebarCollapsed ? [0,100] : [15,85]\r\n  \r\n    function deleteFileFromFiles(filename) {\r\n      setFiles((current) => {\r\n        delete current[filename];\r\n        return current;\r\n      });\r\n    }\r\n  \r\n    return (\r\n      <>\r\n         <Split\r\n        className=\"container\"\r\n        sizes={splitSizes}\r\n        minSize={0}\r\n        expandToMin={false}\r\n        gutterSize={5}\r\n        gutterAlign=\"center\"\r\n        snapOffset={30}\r\n        dragInterval={1}\r\n        direction=\"horizontal\"\r\n        cursor=\"col-resize\"\r\n      >\r\n        \r\n\r\n\r\n        <div className=\"editor\">\r\n          {\r\n            <CodeEditor/>\r\n          }\r\n          \r\n        </div>\r\n        <div className=\"file-content\">\r\n          <Files /> {/* Use the Files component here to display the fetched file content */}\r\n        </div>\r\n      </Split>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default SplitContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,sBAAsB;AAC7B,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG5B,MAAMC,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EACtD;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtC,eAAeiB,cAAcA,CAACC,QAAQ,EAAE;IACpC,MAAMC,KAAK,GAAG,YAAY;IAC1B,MAAMC,IAAI,GAAG,OAAO;IACpB,MAAMC,MAAM,GAAG,QAAQ;IACvB,MAAMC,WAAW,GAAG,+FAA+F;IAEnH,MAAMC,GAAG,GAAI,gCAA+BJ,KAAM,IAAGC,IAAK,cAAaC,MAAO,cAAa;IAC3F,MAAMG,OAAO,GAAG;MAAE,eAAe,EAAG,SAAQF,WAAY;IAAE,CAAC;IAE3D,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAAEC;IAAQ,CAAC,CAAC;IAC9C,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,KAAK,MAAMC,IAAI,IAAIF,IAAI,CAACG,IAAI,EAAE;MAC5B,IAAID,IAAI,CAACE,IAAI,KAAK,MAAM,IAAIF,IAAI,CAACG,IAAI,KAAKd,QAAQ,EAAE;QAClD,MAAMe,OAAO,GAAGJ,IAAI,CAACN,GAAG;QACxB,MAAMW,YAAY,GAAG,MAAMR,KAAK,CAACO,OAAO,EAAE;UAAET;QAAQ,CAAC,CAAC;QACtD,MAAMW,QAAQ,GAAG,MAAMD,YAAY,CAACN,IAAI,CAAC,CAAC;QAC1C,MAAMQ,WAAW,GAAGD,QAAQ,CAACE,OAAO;QACpC,MAAMC,cAAc,GAAGC,IAAI,CAACH,WAAW,CAAC;QACxC,OAAOE,cAAc;MACvB;IACF;IAEA,OAAO,IAAI;EACb;EAEA,MAAMnB,KAAK,GAAG,YAAY;EAC1B,MAAMC,IAAI,GAAG,OAAO;EACpB,MAAMC,MAAM,GAAG,QAAQ;EACvB,MAAMC,WAAW,GAAG,+FAA+F;EAEnH,MAAMC,GAAG,GAAI,gCAA+BJ,KAAM,IAAGC,IAAK,cAAaC,MAAO,cAAa;EAC3F,MAAMG,OAAO,GAAG;IAAE,eAAe,EAAG,SAAQF,WAAY;EAAE,CAAC;EAE3D,MAAMkB,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;EAE5ChB,KAAK,CAACH,GAAG,EAAE;IAAEC;EAAQ,CAAC,CAAC,CACpBmB,IAAI,CAAClB,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CACjCe,IAAI,CAAChB,IAAI,IAAI;IACZ,KAAK,MAAME,IAAI,IAAIF,IAAI,CAACG,IAAI,EAAE;MAC5B,IAAID,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;QACxBa,OAAO,CAACC,GAAG,CAAChB,IAAI,CAACG,IAAI,CAAC;MACxB;IACF;IAEAc,OAAO,CAACC,KAAK,CAACC,EAAE,CAAC,MAAM,EAAEC,KAAK,IAAI;MAChC,MAAMC,MAAM,GAAGD,KAAK,CAACE,QAAQ,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACtC,KAAK,MAAMvB,IAAI,IAAIF,IAAI,CAACG,IAAI,EAAE;QAC5B,IAAID,IAAI,CAACE,IAAI,KAAK,MAAM,IAAIF,IAAI,CAACG,IAAI,CAACqB,UAAU,CAACH,MAAM,CAAC,EAAE;UACxD,MAAMjB,OAAO,GAAGJ,IAAI,CAACN,GAAG;UACxBG,KAAK,CAACO,OAAO,EAAE;YAAET;UAAQ,CAAC,CAAC,CACxBmB,IAAI,CAACT,YAAY,IAAIA,YAAY,CAACN,IAAI,CAAC,CAAC,CAAC,CACzCe,IAAI,CAACR,QAAQ,IAAI;YAChB,MAAMC,WAAW,GAAGD,QAAQ,CAACE,OAAO;YACpC,MAAMC,cAAc,GAAGC,IAAI,CAACH,WAAW,CAAC;YACxCQ,OAAO,CAACC,GAAG,CAACP,cAAc,CAAC;YAC3BE,IAAI,CAACc,SAAS,IAAK,GAAEhB,cAAe,OAAM;UAC5C,CAAC,CAAC;QACN;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAGJrB,cAAc,CAAC,oDAAoD,CAAC,CACjE0B,IAAI,CAACN,OAAO,IAAI;IACfO,OAAO,CAACC,GAAG,CAACR,OAAO,CAAC;IACpBG,IAAI,CAACc,SAAS,IAAK,GAAEjB,OAAQ,OAAM;EACvC,CAAC,CAAC;EAGJ,MAAMkB,QAAQ,GAAG,MAAAA,CAAA,KAAY;IACzB;IACA,IAAI;MACF,MAAMrC,QAAQ,GAAG,oDAAoD;MACrE,MAAMmB,OAAO,GAAG,MAAMpB,cAAc,CAACC,QAAQ,CAAC;MAC9C;MACA0B,OAAO,CAACC,GAAG,CAACR,OAAO,CAAC;IACtB,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACd;MACAZ,OAAO,CAACY,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACAvD,SAAS,CAAC,MAAM;IACdsD,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,EAAE,CAAC;EAER,MAAME,UAAU,GAAG9C,kBAAkB,GAAG,CAAC,CAAC,EAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAC,EAAE,CAAC;EAEzD,SAAS+C,mBAAmBA,CAACC,QAAQ,EAAE;IACrC3C,QAAQ,CAAE4C,OAAO,IAAK;MACpB,OAAOA,OAAO,CAACD,QAAQ,CAAC;MACxB,OAAOC,OAAO;IAChB,CAAC,CAAC;EACJ;EAEA,oBACEtD,OAAA,CAAAE,SAAA;IAAAqD,QAAA,eACGvD,OAAA,CAACJ,KAAK;MACP4D,SAAS,EAAC,WAAW;MACrBC,KAAK,EAAEN,UAAW;MAClBO,OAAO,EAAE,CAAE;MACXC,WAAW,EAAE,KAAM;MACnBC,UAAU,EAAE,CAAE;MACdC,WAAW,EAAC,QAAQ;MACpBC,UAAU,EAAE,EAAG;MACfC,YAAY,EAAE,CAAE;MAChBC,SAAS,EAAC,YAAY;MACtBC,MAAM,EAAC,YAAY;MAAAV,QAAA,gBAKnBvD,OAAA;QAAKwD,SAAS,EAAC,QAAQ;QAAAD,QAAA,eAEnBvD,OAAA,CAACH,UAAU;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGZ,CAAC,eACNrE,OAAA;QAAKwD,SAAS,EAAC,cAAc;QAAAD,QAAA,gBAC3BvD,OAAA,CAACF,KAAK;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,KAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC,gBACN,CAAC;AAEP,CAAC;AAAC/D,EAAA,CArIEH,cAAc;AAAAmE,EAAA,GAAdnE,cAAc;AAuIlB,eAAeA,cAAc;AAAC,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}