{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Paul\\\\Desktop\\\\new folder\\\\reactconnect\\\\reactconnect\\\\src\\\\components\\\\split_container\\\\Files.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\"; // Replace \"path/to/your/file\" with the actual path to the file containing the getFileContent function.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Files = () => {\n  _s();\n  const [fileContent, setFileContent] = useState(null);\n  async function getFileContent(filePath) {\n    const owner = 'bishalbera';\n    const repo = 'Parko';\n    const branch = 'master';\n    const accessToken = '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';\n    const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\n    const headers = {\n      'Authorization': `token ${accessToken}`\n    };\n    const response = await fetch(url, {\n      headers\n    });\n    const data = await response.json();\n    for (const item of data.tree) {\n      if (item.type === 'blob' && item.path === filePath) {\n        const fileUrl = item.url;\n        const fileResponse = await fetch(fileUrl, {\n          headers\n        });\n        const fileData = await fileResponse.json();\n        const fileContent = fileData.content;\n        const decodedContent = atob(fileContent);\n        return decodedContent;\n      }\n    }\n    return null;\n  }\n  const owner = 'bishalbera';\n  const repo = 'Parko';\n  const branch = 'master';\n  const accessToken = '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';\n  const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\n  const headers = {\n    'Authorization': `token ${accessToken}`\n  };\n  const text = document.getElementById(\"text\");\n  fetch(url, {\n    headers\n  }).then(response => response.json()).then(data => {\n    for (const item of data.tree) {\n      if (item.type === 'tree') {\n        console.log(item.path);\n      }\n    }\n    process.stdin.on('data', input => {\n      const folder = input.toString().trim();\n      for (const item of data.tree) {\n        if (item.type === 'blob' && item.path.startsWith(folder)) {\n          const fileUrl = item.url;\n          fetch(fileUrl, {\n            headers\n          }).then(fileResponse => fileResponse.json()).then(fileData => {\n            const fileContent = fileData.content;\n            const decodedContent = atob(fileContent);\n            console.log(decodedContent);\n            text.innerHTML += `${decodedContent}<br/>`;\n          });\n        }\n      }\n    });\n  });\n  getFileContent('lib/features/about_parko/screens/about_screen.dart').then(content => {\n    console.log(content);\n    text.innerHTML += `${content}<br/>`;\n  });\n  const fetchFileContent = async () => {\n    try {\n      const filePath = 'lib/features/about_parko/screens/about_screen.dart';\n      const content = await getFileContent(filePath);\n      setFileContent(content);\n    } catch (error) {\n      console.error('Error fetching file content:', error);\n    }\n  };\n  useEffect(() => {\n    fetchFileContent();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Content:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: fileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(Files, \"a9jURcFZnM2ahW0foU1KCxDEHGQ=\");\n_c = Files;\nexport default Files;\nvar _c;\n$RefreshReg$(_c, \"Files\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Files","_s","fileContent","setFileContent","getFileContent","filePath","owner","repo","branch","accessToken","url","headers","response","fetch","data","json","item","tree","type","path","fileUrl","fileResponse","fileData","content","decodedContent","atob","text","document","getElementById","then","console","log","process","stdin","on","input","folder","toString","trim","startsWith","innerHTML","fetchFileContent","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Paul/Desktop/new folder/reactconnect/reactconnect/src/components/split_container/Files.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";  // Replace \"path/to/your/file\" with the actual path to the file containing the getFileContent function.\r\n\r\nconst Files = () => {\r\n  const [fileContent, setFileContent] = useState(null);\r\n\r\n  async function getFileContent(filePath) {\r\n    const owner = 'bishalbera';\r\n    const repo = 'Parko';\r\n    const branch = 'master';\r\n    const accessToken = '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';\r\n  \r\n    const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\r\n    const headers = { 'Authorization': `token ${accessToken}` };\r\n  \r\n    const response = await fetch(url, { headers });\r\n    const data = await response.json();\r\n  \r\n    for (const item of data.tree) {\r\n      if (item.type === 'blob' && item.path === filePath) {\r\n        const fileUrl = item.url;\r\n        const fileResponse = await fetch(fileUrl, { headers });\r\n        const fileData = await fileResponse.json();\r\n        const fileContent = fileData.content;\r\n        const decodedContent = atob(fileContent);\r\n        return decodedContent;\r\n      }\r\n    }\r\n  \r\n    return null;\r\n  }\r\n  \r\n  const owner = 'bishalbera';\r\n  const repo = 'Parko';\r\n  const branch = 'master';\r\n  const accessToken = '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';\r\n  \r\n  const url = `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`;\r\n  const headers = { 'Authorization': `token ${accessToken}` };\r\n  \r\n  const text = document.getElementById(\"text\");\r\n  \r\n  fetch(url, { headers })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      for (const item of data.tree) {\r\n        if (item.type === 'tree') {\r\n          console.log(item.path);\r\n        }\r\n      }\r\n  \r\n      process.stdin.on('data', input => {\r\n        const folder = input.toString().trim();\r\n        for (const item of data.tree) {\r\n          if (item.type === 'blob' && item.path.startsWith(folder)) {\r\n            const fileUrl = item.url;\r\n            fetch(fileUrl, { headers })\r\n              .then(fileResponse => fileResponse.json())\r\n              .then(fileData => {\r\n                const fileContent = fileData.content;\r\n                const decodedContent = atob(fileContent);\r\n                console.log(decodedContent);\r\n                text.innerHTML += `${decodedContent}<br/>`;\r\n              });\r\n          }\r\n        }\r\n      });\r\n    });\r\n  \r\n  \r\n  getFileContent('lib/features/about_parko/screens/about_screen.dart')\r\n    .then(content => {\r\n      console.log(content);\r\n      text.innerHTML += `${content}<br/>`;\r\n  });\r\n  \r\n\r\n  const fetchFileContent = async () => {\r\n    try {\r\n      const filePath = 'lib/features/about_parko/screens/about_screen.dart';\r\n      const content = await getFileContent(filePath);\r\n      setFileContent(content);\r\n    } catch (error) {\r\n      console.error('Error fetching file content:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFileContent();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>File Content:</h1>\r\n      <pre>{fileContent}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Files;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}