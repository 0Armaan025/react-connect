{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Paul\\\\Desktop\\\\new folder\\\\reactconnect\\\\reactconnect\\\\src\\\\components\\\\split_container\\\\Files.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Files = () => {\n  _s();\n  const [fileContent, setFileContent] = useState(null);\n  async function getFileContent(filePath) {\n    const owner = 'bishalbera';\n    const repo = 'Parko';\n    const branch = 'master';\n    const accessToken = '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';\n    const url = `https://api.github.com/repos/${owner}/${repo}/contents/${filePath}?ref=${branch}`;\n    const headers = {\n      'Authorization': `token ${accessToken}`\n    };\n    const response = await fetch(url, {\n      headers\n    });\n    if (!response.ok) {\n      throw new Error('Error fetching file content');\n    }\n    const fileData = await response.json();\n    if (fileData.encoding === 'base64' && fileData.type === 'file') {\n      return atob(fileData.content);\n    } else {\n      throw new Error('Invalid file format');\n    }\n  }\n  const fetchFileContent = async () => {\n    try {\n      const filePath = 'lib/features/about_parko/screens/about_screen.dart';\n      const content = await getFileContent(filePath);\n      setFileContent(content);\n    } catch (error) {\n      console.error('Error fetching file content:', error);\n      setFileContent(null); // Set fileContent to null in case of error\n    }\n  };\n\n  useEffect(() => {\n    fetchFileContent();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"File Content:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), fileContent !== null ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: fileContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading file content...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(Files, \"a9jURcFZnM2ahW0foU1KCxDEHGQ=\");\n_c = Files;\nexport default Files;\nvar _c;\n$RefreshReg$(_c, \"Files\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Files","_s","fileContent","setFileContent","getFileContent","filePath","owner","repo","branch","accessToken","url","headers","response","fetch","ok","Error","fileData","json","encoding","type","atob","content","fetchFileContent","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Paul/Desktop/new folder/reactconnect/reactconnect/src/components/split_container/Files.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst Files = () => {\r\n  const [fileContent, setFileContent] = useState(null);\r\n\r\n  async function getFileContent(filePath) {\r\n    const owner = 'bishalbera';\r\n    const repo = 'Parko';\r\n    const branch = 'master';\r\n    const accessToken = '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';\r\n  \r\n    const url = `https://api.github.com/repos/${owner}/${repo}/contents/${filePath}?ref=${branch}`;\r\n    const headers = { 'Authorization': `token ${accessToken}` };\r\n  \r\n    const response = await fetch(url, { headers });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Error fetching file content');\r\n    }\r\n  \r\n    const fileData = await response.json();\r\n  \r\n    if (fileData.encoding === 'base64' && fileData.type === 'file') {\r\n      return atob(fileData.content);\r\n    } else {\r\n      throw new Error('Invalid file format');\r\n    }\r\n  }\r\n\r\n  const fetchFileContent = async () => {\r\n    try {\r\n      const filePath = 'lib/features/about_parko/screens/about_screen.dart';\r\n      const content = await getFileContent(filePath);\r\n      setFileContent(content);\r\n    } catch (error) {\r\n      console.error('Error fetching file content:', error);\r\n      setFileContent(null); // Set fileContent to null in case of error\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFileContent();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>File Content:</h1>\r\n      {fileContent !== null ? (\r\n        <pre>{fileContent}</pre>\r\n      ) : (\r\n        <p>Loading file content...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Files;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEpD,eAAeQ,cAAcA,CAACC,QAAQ,EAAE;IACtC,MAAMC,KAAK,GAAG,YAAY;IAC1B,MAAMC,IAAI,GAAG,OAAO;IACpB,MAAMC,MAAM,GAAG,QAAQ;IACvB,MAAMC,WAAW,GAAG,+FAA+F;IAEnH,MAAMC,GAAG,GAAI,gCAA+BJ,KAAM,IAAGC,IAAK,aAAYF,QAAS,QAAOG,MAAO,EAAC;IAC9F,MAAMG,OAAO,GAAG;MAAE,eAAe,EAAG,SAAQF,WAAY;IAAE,CAAC;IAE3D,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;MAAEC;IAAQ,CAAC,CAAC;IAE9C,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAEtC,IAAID,QAAQ,CAACE,QAAQ,KAAK,QAAQ,IAAIF,QAAQ,CAACG,IAAI,KAAK,MAAM,EAAE;MAC9D,OAAOC,IAAI,CAACJ,QAAQ,CAACK,OAAO,CAAC;IAC/B,CAAC,MAAM;MACL,MAAM,IAAIN,KAAK,CAAC,qBAAqB,CAAC;IACxC;EACF;EAEA,MAAMO,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMjB,QAAQ,GAAG,oDAAoD;MACrE,MAAMgB,OAAO,GAAG,MAAMjB,cAAc,CAACC,QAAQ,CAAC;MAC9CF,cAAc,CAACkB,OAAO,CAAC;IACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDpB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;IACxB;EACF,CAAC;;EAEDN,SAAS,CAAC,MAAM;IACdyB,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEvB,OAAA;IAAA0B,QAAA,gBACE1B,OAAA;MAAA0B,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrB3B,WAAW,KAAK,IAAI,gBACnBH,OAAA;MAAA0B,QAAA,EAAMvB;IAAW;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAExB9B,OAAA;MAAA0B,QAAA,EAAG;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC9B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC5B,EAAA,CApDID,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AAsDX,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}